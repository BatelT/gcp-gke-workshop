<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JFrog DevOps Modernization Workshop</title>
    <link>https://jfrogtraining.github.io/clouddays/</link>
    <description>Recent content on JFrog DevOps Modernization Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://jfrogtraining.github.io/clouddays/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous Integration and Delivery</title>
      <link>https://jfrogtraining.github.io/clouddays/2_devops_cloud/21_continuous_integration_and_delivery.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/2_devops_cloud/21_continuous_integration_and_delivery.html</guid>
      <description>Continuous integration and delivery (CI/CD) is the process for which your software components are built from code, integrated, tested, released, deployed and ultimately delivered to end-users. CI/CD pipelines are the software assembly line that orchestrates the building of your software. This CI/CD pipeline line requires infrastructure. Cloud computing has allowed this infrastructure to become dynamic and ephemeral. On cloud infrastructure, your CI/CD pipelines scale up and down to meet your software delivery demands.</description>
    </item>
    
    <item>
      <title>Binary Repository Management</title>
      <link>https://jfrogtraining.github.io/clouddays/2_devops_cloud/22_binary_repository_management.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/2_devops_cloud/22_binary_repository_management.html</guid>
      <description>A Binary Repository Manager is a software hub that simplifies the development process for different teams across an organization by helping them to collaborate on building coherent and compatible software components. It does this by centralizing the management of all the binary artifacts generated and used by the organization, thereby overcoming the incredible complexity arising from diverse binary artifact types, their position in the overall workflow and the set of dependencies between them.</description>
    </item>
    
    <item>
      <title>DevSecOps</title>
      <link>https://jfrogtraining.github.io/clouddays/2_devops_cloud/23_dev_sec_ops.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/2_devops_cloud/23_dev_sec_ops.html</guid>
      <description>Any security issue identified by a security scanning may be reviewed by a small security team that may lack the technical knowledge. This challenge can be reduced by shifting left to the developer and operations teams, making them also responsible for security and compliance. This moves security earlier in the software delivery process. Source code, dependency and artifact security scanning are some examples of moving security into the development process. Implementing the identification of security issues earlier in the CI/CD pipeline, as well as automating security and compliance policies in the Software Development Lifecycle (SDLC), rather than using manual processes, is crucial.</description>
    </item>
    
    <item>
      <title>JFrog Platform for DevOps in the Cloud</title>
      <link>https://jfrogtraining.github.io/clouddays/2_devops_cloud/24_jfrog_platform_overview.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/2_devops_cloud/24_jfrog_platform_overview.html</guid>
      <description>The JFrog Platform is designed to meet the growing needs of companies to develop and distribute software in the cloud. It provides DevOps teams with the tools needed to create, manage, secure and deploy software with ease. These tools cover everything from continuous integration and delivery (CI/CD), binary repository management, artifact maturity, security and vulnerability protection (DevSecOps), release management, analytics and distribution.
JFrog Artifactory is an Artifact Repository Manager that fully supports software packages created by any language or technology.</description>
    </item>
    
    <item>
      <title>Build the JFrog CLI Docker Image</title>
      <link>https://jfrogtraining.github.io/clouddays/5_build_publish_app/51_build_jfrog_cli_image.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/5_build_publish_app/51_build_jfrog_cli_image.html</guid>
      <description>First, we will use an npm docker image and add JFrog CLI to it. This will enable us to use JFrog CLI to build npm packages.
  Return to your Cloud Shell terminal and change directory to azureworkshop/jfrog-cli-docker.
  Let&amp;rsquo;s use gcloud build to create JFrog CLI docker image. This build command uses cloudbuild.yaml. If you look inside this file, you will find it performs following steps
   docker build to create the docker image docker tag to tag newly created image docker login to log into your Free Tier docker push to push the newly created image to Artifactory&amp;rsquo;s Docker repository.</description>
    </item>
    
    <item>
      <title>Build the NPM Application Docker Image</title>
      <link>https://jfrogtraining.github.io/clouddays/5_build_publish_app/52_build_docker_image.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/5_build_publish_app/52_build_docker_image.html</guid>
      <description>Now, we can use freshly created JFrog CLI image to build npm project, package it in a Docker image and push it to artifactory&amp;rsquo;s Docker repository.
  Return to your Google Cloud Shell terminal and cd to folder 2-create-npm-build
  Let&amp;rsquo;s use gcloud build again to build npm project and create docker image. This build command uses cloudbuild.yaml. If you look inside this file, you will find it performs following steps</description>
    </item>
    
    <item>
      <title>Get a GCP Environment</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/41_gcp_environment_setup/411_get_gcp_environment.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/41_gcp_environment_setup/411_get_gcp_environment.html</guid>
      <description>This workshop requires a GCP environment. Your instructor will provide a link and an activation code. The following steps walk through the process of obtaining a GCP environment using the provided link and activation code.
 Open the instructor provided link in your browser. This will take you to environment registration page.  Fill out the form with your information and click Submit.  Next, click on the Launch Lab button.</description>
    </item>
    
    <item>
      <title>Create a GKE Cluster</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/41_gcp_environment_setup/412_create_gke_cluster.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/41_gcp_environment_setup/412_create_gke_cluster.html</guid>
      <description>In this section, we will create a GKE Cluster in our Google Cloud Shell using the gcloud CLI.
The gcloud command-line interface is the primary CLI tool to create and manage Google Cloud resources. You can use this tool to perform many common platform tasks either from the command line or in scripts and other automations.
  In your Google Cloud Shell, execute the following command to set an environment variable for the GCP environment project ID.</description>
    </item>
    
    <item>
      <title>Get a Free JFrog Platform Instance</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/431_jfrog_free.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/431_jfrog_free.html</guid>
      <description>If you do not have access to a JFrog Platform instance, use the JFrog Platform Cloud Free Tier to get your own JFrog Platform instance with Artifactory and Xray.
When signing up for the JFrog Platform Cloud Free Tier, ensure that you select Azure and the US West (California) region.
  JFrog Platform Cloud Free Tier   </description>
    </item>
    
    <item>
      <title>Generate an API Key</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/432_api_key.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/432_api_key.html</guid>
      <description>Remember your username and API key. We will use it again with the JFrog CLI and to set up Azure AKS to deploy your image.
  Go to your JFrog Platform instance at https://[server name].jfrog.io. Refer to your JFrog Free Subscription Activation email if needed. Substitute your server name.  Login to your JFrog Platform instance with your credentials.  Once logged into your JFrog Platform instance, you will be presented with the landing page.</description>
    </item>
    
    <item>
      <title>Create a Docker Repo</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/433_create_docker_repo.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/433_create_docker_repo.html</guid>
      <description>Next, we will set up a new Docker repository in Artifacory. We will use this repository to host our workshop application image.
 In your JFrog Platform instance go to Administration ► Repositories ► Repositories.  Click on New Local Repository on the right.  For package type, select Docker.  Specify clouddays for the Repository Key.   Click Save &amp;amp; Finish.
  Close the New Docker Repository dialog.</description>
    </item>
    
    <item>
      <title>Configure a Xray Index</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/434_configure_xray_index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/434_configure_xray_index.html</guid>
      <description>Next, we will configure Xray to index our new Docker repository. This allows Xray to automatically analyze all the artifacts in this repository.
 Let&amp;rsquo;s configure Xray to index the new Docker repository automatically. Go to Administration ► Xray Security &amp;amp; Compliance.   Click on Indexed Resources.
  Click on Add a Repository on the right.
  Move the clouddays repository into the Included Repositories.  Click Save.</description>
    </item>
    
    <item>
      <title>Create a Xray Policy</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/435_create_xray_policy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/435_create_xray_policy.html</guid>
      <description>Next, we will create an Xray security policy that sets the types of security violations to alert on.
 Go to Application ► Security &amp;amp; Compliance ► Policies.   Click on Create a Policy.
  Give the policy a name like default-security and a description.
   Click on New Rule at the right.
  Give the rule a name like high-security-rule.
  For Minimal Severity, specify High.</description>
    </item>
    
    <item>
      <title>Create a Xray Watch</title>
      <link>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/436_create_xray_watch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/4_workshop_setup/43_jfrog_setup/436_create_xray_watch.html</guid>
      <description>Next, we will create an Xray security watch to scan our new Docker repository.
 Go to Application ► Security &amp;amp; Compliance ► Watches.   Click on Set up a Watch.
  Give the watch a name like clouddays-docker-repo-watch and a description.
   Click on Add Repositories.
  Move the clouddays repository into the Included Repositories.
   Click Save.
  Scroll down to the Assigned Policies and click on Manage Policies.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>https://jfrogtraining.github.io/clouddays/cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/cleanup.html</guid>
      <description>Your JFrog Platform Instance - The JFrog Platform instance that you used in this workshop will automatically be destroyed after the workshop. There isn&amp;rsquo;t anything you need to do. If you would like keep it, you can upgrade to one of the premium plans. Do this by clicking on the Upgrade button.   GKE Cluster - To cleanup your GKE resources, go to your GKE console and delete following resources</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://jfrogtraining.github.io/clouddays/resources.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jfrogtraining.github.io/clouddays/resources.html</guid>
      <description>JFrog Platform Documentation - The full documentation of the JFrog Platform, the universal, hybrid, end-to-end DevOps automation solution. It is designed to take you through all the JFrog Products. Including user, administration and developer guides, installation and upgrade procedures, system architecture and configuration, and working with the JFrog application. JFrog Academy - Learn more about the JFrog Platform at your own pace with JFrog Academy free courses taught by our experts.</description>
    </item>
    
  </channel>
</rss>
